// <auto-generated />
using Configurator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConfiguratorBackend.Migrations
{
    [DbContext(typeof(CatalogueContext))]
    [Migration("20241218202406_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.DriveBay", b =>
                {
                    b.Property<int>("StorageAreaID")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorID")
                        .HasColumnType("int");

                    b.Property<int>("DriveCount")
                        .HasColumnType("int");

                    b.HasKey("StorageAreaID", "FormFactorID");

                    b.HasIndex("FormFactorID");

                    b.ToTable("CaseDriveBays");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.ExpansionSlotArea", b =>
                {
                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.Property<int>("BracketID")
                        .HasColumnType("int");

                    b.Property<bool>("RiserRequired")
                        .HasColumnType("bit");

                    b.Property<int>("SlotCount")
                        .HasColumnType("int");

                    b.HasKey("UnitID");

                    b.HasIndex("BracketID");

                    b.ToTable("CaseExpansionSlotAreas");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.Layout", b =>
                {
                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxAirCoolerHeight")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("MaxGraphicsProcessorUnitLength")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("MaxPowerSupplyLength")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("UnitID");

                    b.ToTable("CaseLayouts");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.LayoutPanel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("LayoutID")
                        .HasColumnType("int");

                    b.Property<int>("PanelID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PanelID");

                    b.HasIndex("LayoutID", "PanelID")
                        .IsUnique();

                    b.ToTable("CaseLayoutPanels");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.LayoutPanelFan", b =>
                {
                    b.Property<int>("LayoutPanelID")
                        .HasColumnType("int");

                    b.Property<int>("FanSizeID")
                        .HasColumnType("int");

                    b.Property<int>("FanCount")
                        .HasColumnType("int");

                    b.HasKey("LayoutPanelID", "FanSizeID");

                    b.HasIndex("FanSizeID");

                    b.ToTable("CaseLayoutPanelFans");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.LayoutPanelRadiator", b =>
                {
                    b.Property<int>("LayoutPanelID")
                        .HasColumnType("int");

                    b.Property<int>("RadiatorSizeID")
                        .HasColumnType("int");

                    b.HasKey("LayoutPanelID", "RadiatorSizeID");

                    b.HasIndex("RadiatorSizeID");

                    b.ToTable("CaseLayoutPanelRadiators");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.Material", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CaseMaterials");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.Panel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CasePanels");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.Size", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CaseSizes");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.StorageArea", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("LayoutID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LayoutID");

                    b.ToTable("CaseStorageAreas");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.Unit", b =>
                {
                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<decimal>("ExternalVolume")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("PowerSupplyFormFactorID")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryMotherboardFormFactorID")
                        .HasColumnType("int");

                    b.Property<int>("SidePanelMaterialID")
                        .HasColumnType("int");

                    b.Property<int>("SizeID")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("ComponentID");

                    b.HasIndex("PowerSupplyFormFactorID");

                    b.HasIndex("PrimaryMotherboardFormFactorID");

                    b.HasIndex("SidePanelMaterialID");

                    b.HasIndex("SizeID");

                    b.ToTable("CaseUnits");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.UnitIOConnector", b =>
                {
                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorCount")
                        .HasColumnType("int");

                    b.HasKey("UnitID", "ConnectorID");

                    b.HasIndex("ConnectorID");

                    b.ToTable("CaseUnitIOConnectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.UnitPowerSupplyConnector", b =>
                {
                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorCount")
                        .HasColumnType("int");

                    b.HasKey("UnitID", "ConnectorID");

                    b.HasIndex("ConnectorID");

                    b.ToTable("CaseUnitPowerSupplyConnectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Channel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CentralProcessorChannels");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.CentralProcessor.CoreFamily", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AlternateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MicroarchitectureID")
                        .HasColumnType("int");

                    b.Property<int?>("UnitM2SlotUnitID")
                        .HasColumnType("int");

                    b.Property<int?>("UnitPcieSlotUnitID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CodeName")
                        .IsUnique();

                    b.HasIndex("MicroarchitectureID");

                    b.HasIndex("UnitM2SlotUnitID");

                    b.HasIndex("UnitPcieSlotUnitID");

                    b.ToTable("CentralProcessorCoreFamilies");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Microarchitecture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CentralProcessorMicroarchitectures");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Series", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UnitM2SlotUnitID")
                        .HasColumnType("int");

                    b.Property<int?>("UnitPcieSlotUnitID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UnitM2SlotUnitID");

                    b.HasIndex("UnitPcieSlotUnitID");

                    b.ToTable("CentralProcessorSeries");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Socket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CentralProcessorSockets");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Unit", b =>
                {
                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<int>("ChannelID")
                        .HasColumnType("int");

                    b.Property<bool>("CoolerIncluded")
                        .HasColumnType("bit");

                    b.Property<int>("CoreFamilyID")
                        .HasColumnType("int");

                    b.Property<decimal?>("EfficiencyCoreBoostClock")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("EfficiencyCoreClock")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("EfficiencyCoreCount")
                        .HasColumnType("int");

                    b.Property<bool>("HasEfficiencyCores")
                        .HasColumnType("bit");

                    b.Property<bool>("HasIntegratedGraphics")
                        .HasColumnType("bit");

                    b.Property<decimal>("L2Cache")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("L3Cache")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MaxTotalMemoryCapacity")
                        .HasColumnType("int");

                    b.Property<decimal>("PerformanceCoreBoostClock")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("PerformanceCoreClock")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("PerformanceCoreCount")
                        .HasColumnType("int");

                    b.Property<int>("SeriesID")
                        .HasColumnType("int");

                    b.Property<bool>("SimultaneousMultithreading")
                        .HasColumnType("bit");

                    b.Property<int?>("SizeID")
                        .HasColumnType("int");

                    b.Property<int>("SocketID")
                        .HasColumnType("int");

                    b.Property<bool>("SupportBufferedMemory")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportECCMemory")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportNonECCMemory")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportUnbufferedMemory")
                        .HasColumnType("bit");

                    b.Property<int>("ThreadCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalPower")
                        .HasColumnType("int");

                    b.Property<int?>("UnitM2SlotUnitID")
                        .HasColumnType("int");

                    b.Property<int?>("UnitPcieSlotUnitID")
                        .HasColumnType("int");

                    b.HasKey("ComponentID");

                    b.HasIndex("ChannelID");

                    b.HasIndex("CoreFamilyID");

                    b.HasIndex("SeriesID");

                    b.HasIndex("SizeID");

                    b.HasIndex("SocketID");

                    b.HasIndex("UnitM2SlotUnitID");

                    b.HasIndex("UnitPcieSlotUnitID");

                    b.ToTable("CentralProcessorUnits");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Cooler.RadiatorSize", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Length")
                        .IsUnique();

                    b.ToTable("CoolerRadiatorSizes");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Cooler.Unit", b =>
                {
                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<string>("FanAirflow")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FanCount")
                        .HasColumnType("int");

                    b.Property<string>("FanNoiseLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FanRpm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FanStaticPressure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ComponentID");

                    b.ToTable("CoolerUnits", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Cooler.UnitConnector", b =>
                {
                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorCount")
                        .HasColumnType("int");

                    b.HasKey("UnitID", "ConnectorID");

                    b.HasIndex("ConnectorID");

                    b.ToTable("CoolerUnitConnectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Fan.Pack", b =>
                {
                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<string>("Airflow")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoiseLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Pwm")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Rpm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SizeID")
                        .HasColumnType("int");

                    b.Property<string>("StaticPressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComponentID");

                    b.HasIndex("SizeID");

                    b.ToTable("FanPacks");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Fan.PackConnector", b =>
                {
                    b.Property<int>("PackID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorCount")
                        .HasColumnType("int");

                    b.HasKey("PackID", "ConnectorID");

                    b.HasIndex("ConnectorID");

                    b.ToTable("PackConnector");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Fan.Size", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("SideLength")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SideLength")
                        .IsUnique();

                    b.ToTable("FanSizes");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.General.Colour", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Colours");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.General.Component", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ColourID")
                        .HasColumnType("int");

                    b.Property<bool>("IsColoured")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturerID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnSale")
                        .HasColumnType("bit");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RegularPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("Saleable")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ColourID");

                    b.HasIndex("ManufacturerID");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.General.Manufacturer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.GraphicsCard.Chipset", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GraphicsCardChipsets");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.GraphicsCard.Configuration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UnitID");

                    b.ToTable("GraphicsCardConfigurations");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.GraphicsCard.ConfigurationConnector", b =>
                {
                    b.Property<int>("ConfigurationID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorCount")
                        .HasColumnType("int");

                    b.HasKey("ConfigurationID", "ConnectorID");

                    b.HasIndex("ConnectorID");

                    b.ToTable("GraphicsCardConfigurationConnectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.GraphicsCard.Unit", b =>
                {
                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<int>("BoostClock")
                        .HasColumnType("int");

                    b.Property<int>("ChipsetID")
                        .HasColumnType("int");

                    b.Property<int>("CoreClock")
                        .HasColumnType("int");

                    b.Property<int>("ExpansionCardID")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("MemoryCapacity")
                        .HasColumnType("int");

                    b.Property<int>("MemoryTypeID")
                        .HasColumnType("int");

                    b.Property<int>("RecommendedPower")
                        .HasColumnType("int");

                    b.Property<int>("TotalPower")
                        .HasColumnType("int");

                    b.Property<int>("TotalSlotWidth")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("ComponentID");

                    b.HasIndex("ChipsetID");

                    b.HasIndex("ExpansionCardID")
                        .IsUnique();

                    b.HasIndex("MemoryTypeID");

                    b.ToTable("GraphicsCardUnits");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.IO.Connector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("IOConnectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.M2.ExpansionCard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("FormFactorID")
                        .HasColumnType("int");

                    b.Property<int>("KeyID")
                        .HasColumnType("int");

                    b.Property<int>("LaneSizeID")
                        .HasColumnType("int");

                    b.Property<int>("VersionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FormFactorID");

                    b.HasIndex("KeyID");

                    b.HasIndex("LaneSizeID");

                    b.HasIndex("VersionID");

                    b.ToTable("M2ExpansionCards");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.M2.FormFactor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("M2FormFactors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.M2.Key", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("M2Keys");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.M2.Slot", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("KeyID")
                        .HasColumnType("int");

                    b.Property<int>("LaneSizeID")
                        .HasColumnType("int");

                    b.Property<int>("VersionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KeyID");

                    b.HasIndex("LaneSizeID");

                    b.HasIndex("VersionID");

                    b.ToTable("M2Slots");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Memory.FormFactor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MemoryFormFactors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Memory.Kit", b =>
                {
                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<int>("CASLatency")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("ClockFrequency")
                        .HasColumnType("int");

                    b.Property<decimal>("FirstWordLatency")
                        .HasColumnType("decimal(6,3)");

                    b.Property<int>("FormFactorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool>("IsBuffered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsECC")
                        .HasColumnType("bit");

                    b.Property<int>("ModuleCount")
                        .HasColumnType("int");

                    b.Property<string>("Timing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.Property<decimal>("Voltage")
                        .HasColumnType("decimal(6,3)");

                    b.HasKey("ComponentID");

                    b.HasIndex("FormFactorID");

                    b.HasIndex("TypeID");

                    b.ToTable("MemoryKits");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Memory.Type", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MemoryTypes");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.Chipset", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SocketID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SocketID");

                    b.ToTable("MotherboardChipsets");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.FormFactor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MotherboardFormFactors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.Unit", b =>
                {
                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<int>("ChannelID")
                        .HasColumnType("int");

                    b.Property<int>("ChipsetID")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorID")
                        .HasColumnType("int");

                    b.Property<int>("MemoryFormFactorID")
                        .HasColumnType("int");

                    b.Property<int>("MemorySlotCount")
                        .HasColumnType("int");

                    b.Property<int>("MemoryTotalCapacity")
                        .HasColumnType("int");

                    b.Property<int>("MemoryTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("SupportBufferedMemory")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportECCMemory")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportNonECCMemory")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportUnbufferedMemory")
                        .HasColumnType("bit");

                    b.HasKey("ComponentID");

                    b.HasIndex("ChannelID");

                    b.HasIndex("ChipsetID");

                    b.HasIndex("FormFactorID");

                    b.HasIndex("MemoryFormFactorID");

                    b.HasIndex("MemoryTypeID");

                    b.ToTable("MotherboardUnits");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitIOConnector", b =>
                {
                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorCount")
                        .HasColumnType("int");

                    b.HasKey("UnitID", "ConnectorID");

                    b.HasIndex("ConnectorID");

                    b.ToTable("MotherboardUnitIOConnectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitM2Slot", b =>
                {
                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.Property<int>("ConfigurationNumber")
                        .HasColumnType("int");

                    b.Property<bool>("HasConfigurationNumber")
                        .HasColumnType("bit");

                    b.Property<int>("SlotID")
                        .HasColumnType("int");

                    b.Property<int>("SlotPosition")
                        .HasColumnType("int");

                    b.HasKey("UnitID");

                    b.HasIndex("SlotID");

                    b.HasIndex("UnitID", "SlotID", "SlotPosition", "ConfigurationNumber", "HasConfigurationNumber")
                        .IsUnique();

                    b.ToTable("MotherboardUnitM2Slots");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitPcieSlot", b =>
                {
                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.Property<int>("ConfigurationNumber")
                        .HasColumnType("int");

                    b.Property<bool>("HasConfigurationNumber")
                        .HasColumnType("bit");

                    b.Property<int>("SlotID")
                        .HasColumnType("int");

                    b.Property<int>("SlotPosition")
                        .HasColumnType("int");

                    b.HasKey("UnitID");

                    b.HasIndex("SlotID");

                    b.HasIndex("UnitID", "SlotID", "SlotPosition", "ConfigurationNumber", "HasConfigurationNumber")
                        .IsUnique();

                    b.ToTable("MotherboardUnitPcieSlots");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitPowerSupplyConnector", b =>
                {
                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorCount")
                        .HasColumnType("int");

                    b.HasKey("UnitID", "ConnectorID");

                    b.HasIndex("ConnectorID");

                    b.ToTable("MotherboardUnitPowerSupplyConnectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Pcie.Bracket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PcieBrackets");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Pcie.ExpansionCard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BracketID")
                        .HasColumnType("int");

                    b.Property<int>("ExpansionSlotWidth")
                        .HasColumnType("int");

                    b.Property<int>("LaneSizeID")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalSizeID")
                        .HasColumnType("int");

                    b.Property<int>("VersionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BracketID");

                    b.HasIndex("LaneSizeID");

                    b.HasIndex("PhysicalSizeID");

                    b.HasIndex("VersionID");

                    b.ToTable("PcieExpansionCards");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Pcie.Size", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("LaneCount")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("PcieSizes");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Pcie.Slot", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("LaneSizeID")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalSizeID")
                        .HasColumnType("int");

                    b.Property<int>("VersionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LaneSizeID");

                    b.HasIndex("PhysicalSizeID");

                    b.HasIndex("VersionID");

                    b.ToTable("PcieSlots");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Pcie.Version", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PcieVersions");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.PowerSupply.Connector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PowerSupplyConnectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.PowerSupply.EfficiencyRating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PowerSupplyEfficiencyRatings");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.PowerSupply.FormFactor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PowerSupplyFormFactors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.PowerSupply.Modularity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PowerSupplyModularities");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.PowerSupply.Unit", b =>
                {
                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<int>("EfficiencyRatingID")
                        .HasColumnType("int");

                    b.Property<bool>("Fanless")
                        .HasColumnType("bit");

                    b.Property<int>("FormFactorID")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("ModularityID")
                        .HasColumnType("int");

                    b.Property<int>("TotalPower")
                        .HasColumnType("int");

                    b.HasKey("ComponentID");

                    b.HasIndex("EfficiencyRatingID");

                    b.HasIndex("FormFactorID");

                    b.HasIndex("ModularityID");

                    b.ToTable("PowerSupplyUnits");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.PowerSupply.UnitConnector", b =>
                {
                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorID")
                        .HasColumnType("int");

                    b.Property<int>("SplitCount")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorCount")
                        .HasColumnType("int");

                    b.HasKey("UnitID", "ConnectorID", "SplitCount");

                    b.HasIndex("ConnectorID");

                    b.ToTable("PowerSupplyUnitConnectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.ConnectionInterface", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StorageConnectionInterfaces");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.Drive", b =>
                {
                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("UnitID");

                    b.ToTable("StorageDrives", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.FormFactor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StorageFormFactors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.NandType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StorageNandTypes");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.Unit", b =>
                {
                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<int>("Cache")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("ConnectionInterfaceID")
                        .HasColumnType("int");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<int>("ReadSpeed")
                        .HasColumnType("int");

                    b.Property<int>("WriteSpeed")
                        .HasColumnType("int");

                    b.HasKey("ComponentID");

                    b.HasIndex("ConnectionInterfaceID");

                    b.ToTable("StorageUnits", (string)null);

                    b.HasDiscriminator<int>("Location");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ConnectorConnector", b =>
                {
                    b.Property<int>("CompatibleConnectorsID")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalConnectorsID")
                        .HasColumnType("int");

                    b.HasKey("CompatibleConnectorsID", "PhysicalConnectorsID");

                    b.HasIndex("PhysicalConnectorsID");

                    b.ToTable("ConnectorConnector");
                });

            modelBuilder.Entity("ConnectorConnector1", b =>
                {
                    b.Property<int>("CompatibleConnectorsID")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalConnectorsID")
                        .HasColumnType("int");

                    b.HasKey("CompatibleConnectorsID", "PhysicalConnectorsID");

                    b.HasIndex("PhysicalConnectorsID");

                    b.ToTable("ConnectorConnector1");
                });

            modelBuilder.Entity("FormFactorSlot", b =>
                {
                    b.Property<int>("FormFactorsID")
                        .HasColumnType("int");

                    b.Property<int>("SlotsID")
                        .HasColumnType("int");

                    b.HasKey("FormFactorsID", "SlotsID");

                    b.HasIndex("SlotsID");

                    b.ToTable("FormFactorSlot");
                });

            modelBuilder.Entity("FormFactorUnit", b =>
                {
                    b.Property<int>("CasesComponentID")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardFormFactorsID")
                        .HasColumnType("int");

                    b.HasKey("CasesComponentID", "MotherboardFormFactorsID");

                    b.HasIndex("MotherboardFormFactorsID");

                    b.ToTable("FormFactorUnit");
                });

            modelBuilder.Entity("KeyKey", b =>
                {
                    b.Property<int>("CompatibleKeysID")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalKeysID")
                        .HasColumnType("int");

                    b.HasKey("CompatibleKeysID", "PhysicalKeysID");

                    b.HasIndex("PhysicalKeysID");

                    b.ToTable("KeyKey");
                });

            modelBuilder.Entity("SocketUnit", b =>
                {
                    b.Property<int>("CoolersComponentID")
                        .HasColumnType("int");

                    b.Property<int>("SocketsID")
                        .HasColumnType("int");

                    b.HasKey("CoolersComponentID", "SocketsID");

                    b.HasIndex("SocketsID");

                    b.ToTable("SocketUnit");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Cooler.AirUnit", b =>
                {
                    b.HasBaseType("ConfiguratorBackend.Models.Catalogue.Cooler.Unit");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(8,2)");

                    b.Property<bool>("LimitsMemoryHeight")
                        .HasColumnType("bit");

                    b.Property<int?>("MaximumMemoryHeight")
                        .HasColumnType("int");

                    b.ToTable("CoolerUnits", t =>
                        {
                            t.Property("Height")
                                .HasColumnName("AirUnit_Height");
                        });

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Cooler.LiquidUnit", b =>
                {
                    b.HasBaseType("ConfiguratorBackend.Models.Catalogue.Cooler.Unit");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("RadiatorSizeID")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(8,2)");

                    b.HasIndex("RadiatorSizeID");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.HardDiskDrive", b =>
                {
                    b.HasBaseType("ConfiguratorBackend.Models.Catalogue.Storage.Drive");

                    b.Property<int>("Rpm")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.SolidStateDrive", b =>
                {
                    b.HasBaseType("ConfiguratorBackend.Models.Catalogue.Storage.Drive");

                    b.Property<int>("NandTypeID")
                        .HasColumnType("int");

                    b.HasIndex("NandTypeID");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.CaseUnit", b =>
                {
                    b.HasBaseType("ConfiguratorBackend.Models.Catalogue.Storage.Unit");

                    b.Property<int>("FormFactorID")
                        .HasColumnType("int");

                    b.Property<int>("IOConnectorID")
                        .HasColumnType("int");

                    b.Property<int>("PowerSupplyConnectorID")
                        .HasColumnType("int");

                    b.HasIndex("FormFactorID");

                    b.HasIndex("IOConnectorID");

                    b.HasIndex("PowerSupplyConnectorID");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.M2Unit", b =>
                {
                    b.HasBaseType("ConfiguratorBackend.Models.Catalogue.Storage.Unit");

                    b.Property<int>("ExpansionCardID")
                        .HasColumnType("int");

                    b.HasIndex("ExpansionCardID");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.DriveBay", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Storage.FormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Case.StorageArea", "StorageArea")
                        .WithMany("DriveBays")
                        .HasForeignKey("StorageAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormFactor");

                    b.Navigation("StorageArea");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.ExpansionSlotArea", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Pcie.Bracket", "Bracket")
                        .WithMany("ExpansionSlotAreas")
                        .HasForeignKey("BracketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Case.Unit", "Unit")
                        .WithMany("ExpansionSlotAreas")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bracket");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.Layout", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Case.Unit", "Unit")
                        .WithMany("Layouts")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.LayoutPanel", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Case.Layout", "Layout")
                        .WithMany("Panels")
                        .HasForeignKey("LayoutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Case.Panel", "Panel")
                        .WithMany("Layouts")
                        .HasForeignKey("PanelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layout");

                    b.Navigation("Panel");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.LayoutPanelFan", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Fan.Size", "FanSize")
                        .WithMany("CasePanels")
                        .HasForeignKey("FanSizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Case.LayoutPanel", "LayoutPanel")
                        .WithMany("Fans")
                        .HasForeignKey("LayoutPanelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FanSize");

                    b.Navigation("LayoutPanel");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.LayoutPanelRadiator", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Case.LayoutPanel", "LayoutPanel")
                        .WithMany("Radiators")
                        .HasForeignKey("LayoutPanelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Cooler.RadiatorSize", "RadiatorSize")
                        .WithMany("CasePanels")
                        .HasForeignKey("RadiatorSizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LayoutPanel");

                    b.Navigation("RadiatorSize");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.StorageArea", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Case.Layout", "Layout")
                        .WithMany("StorageAreas")
                        .HasForeignKey("LayoutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layout");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.Unit", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.General.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.PowerSupply.FormFactor", "PowerSupplyFormFactor")
                        .WithMany("Cases")
                        .HasForeignKey("PowerSupplyFormFactorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Motherboard.FormFactor", "PrimaryMotherboardFormFactor")
                        .WithMany("CasesWithAsPrimary")
                        .HasForeignKey("PrimaryMotherboardFormFactorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Case.Material", "SidePanelMaterial")
                        .WithMany("Cases")
                        .HasForeignKey("SidePanelMaterialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Case.Size", "Size")
                        .WithMany("Cases")
                        .HasForeignKey("SizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("PowerSupplyFormFactor");

                    b.Navigation("PrimaryMotherboardFormFactor");

                    b.Navigation("SidePanelMaterial");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.UnitIOConnector", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.IO.Connector", "Connector")
                        .WithMany("Cases")
                        .HasForeignKey("ConnectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Case.Unit", "Unit")
                        .WithMany("IOConnectors")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connector");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.UnitPowerSupplyConnector", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.PowerSupply.Connector", "Connector")
                        .WithMany("Cases")
                        .HasForeignKey("ConnectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Case.Unit", "Unit")
                        .WithMany("PowerSupplyConnectors")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connector");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.CentralProcessor.CoreFamily", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Microarchitecture", "Microarchitecture")
                        .WithMany("CoreFamilies")
                        .HasForeignKey("MicroarchitectureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitM2Slot", null)
                        .WithMany("CoreFamilies")
                        .HasForeignKey("UnitM2SlotUnitID");

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitPcieSlot", null)
                        .WithMany("CoreFamilies")
                        .HasForeignKey("UnitPcieSlotUnitID");

                    b.Navigation("Microarchitecture");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Series", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitM2Slot", null)
                        .WithMany("Series")
                        .HasForeignKey("UnitM2SlotUnitID");

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitPcieSlot", null)
                        .WithMany("Series")
                        .HasForeignKey("UnitPcieSlotUnitID");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Unit", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Channel", "Channel")
                        .WithMany("Units")
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.General.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.CentralProcessor.CoreFamily", "CoreFamily")
                        .WithMany("Units")
                        .HasForeignKey("CoreFamilyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Series", "Series")
                        .WithMany("Units")
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Fan.Size", null)
                        .WithMany("Units")
                        .HasForeignKey("SizeID");

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Socket", "Socket")
                        .WithMany("Units")
                        .HasForeignKey("SocketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitM2Slot", null)
                        .WithMany("Processors")
                        .HasForeignKey("UnitM2SlotUnitID");

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitPcieSlot", null)
                        .WithMany("Processors")
                        .HasForeignKey("UnitPcieSlotUnitID");

                    b.Navigation("Channel");

                    b.Navigation("Component");

                    b.Navigation("CoreFamily");

                    b.Navigation("Series");

                    b.Navigation("Socket");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Cooler.Unit", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.General.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Cooler.UnitConnector", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.IO.Connector", "Connector")
                        .WithMany("Coolers")
                        .HasForeignKey("ConnectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Cooler.Unit", "Unit")
                        .WithMany("Connectors")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connector");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Fan.Pack", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.General.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Fan.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Fan.PackConnector", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.IO.Connector", "Connector")
                        .WithMany("Fans")
                        .HasForeignKey("ConnectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Fan.Pack", "Pack")
                        .WithMany("Connectors")
                        .HasForeignKey("PackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connector");

                    b.Navigation("Pack");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.General.Component", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.General.Colour", "Colour")
                        .WithMany("Components")
                        .HasForeignKey("ColourID");

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.General.Manufacturer", "Manufacturer")
                        .WithMany("Components")
                        .HasForeignKey("ManufacturerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colour");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.GraphicsCard.Configuration", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.GraphicsCard.Unit", "Unit")
                        .WithMany("Configurations")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.GraphicsCard.ConfigurationConnector", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.GraphicsCard.Configuration", "Configuration")
                        .WithMany("Connectors")
                        .HasForeignKey("ConfigurationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.PowerSupply.Connector", "Connector")
                        .WithMany("GraphicsCards")
                        .HasForeignKey("ConnectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Connector");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.GraphicsCard.Unit", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.GraphicsCard.Chipset", "Chipset")
                        .WithMany("Units")
                        .HasForeignKey("ChipsetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.General.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Pcie.ExpansionCard", "ExpansionCard")
                        .WithOne("GraphicsProcessor")
                        .HasForeignKey("ConfiguratorBackend.Models.Catalogue.GraphicsCard.Unit", "ExpansionCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Memory.Type", "MemoryType")
                        .WithMany("GraphicsCards")
                        .HasForeignKey("MemoryTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chipset");

                    b.Navigation("Component");

                    b.Navigation("ExpansionCard");

                    b.Navigation("MemoryType");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.M2.ExpansionCard", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.M2.FormFactor", "FormFactor")
                        .WithMany("ExpansionCards")
                        .HasForeignKey("FormFactorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.M2.Key", "Key")
                        .WithMany("ExpansionCards")
                        .HasForeignKey("KeyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Pcie.Size", "LaneSize")
                        .WithMany()
                        .HasForeignKey("LaneSizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Pcie.Version", "Version")
                        .WithMany("M2ExpansionCards")
                        .HasForeignKey("VersionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormFactor");

                    b.Navigation("Key");

                    b.Navigation("LaneSize");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.M2.Slot", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.M2.Key", "Key")
                        .WithMany("Slots")
                        .HasForeignKey("KeyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Pcie.Size", "LaneSize")
                        .WithMany("M2Slots")
                        .HasForeignKey("LaneSizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Pcie.Version", "Version")
                        .WithMany("M2Slots")
                        .HasForeignKey("VersionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Key");

                    b.Navigation("LaneSize");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Memory.Kit", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.General.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Memory.FormFactor", "FormFactor")
                        .WithMany("Kits")
                        .HasForeignKey("FormFactorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Memory.Type", "Type")
                        .WithMany("Kits")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("FormFactor");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.Chipset", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Socket", "Socket")
                        .WithMany()
                        .HasForeignKey("SocketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Socket");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.Unit", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Channel", "Channel")
                        .WithMany("Motherboards")
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Motherboard.Chipset", "Chipset")
                        .WithMany("Units")
                        .HasForeignKey("ChipsetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.General.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Motherboard.FormFactor", "FormFactor")
                        .WithMany("Units")
                        .HasForeignKey("FormFactorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Memory.FormFactor", "MemoryFormFactor")
                        .WithMany("Motherboards")
                        .HasForeignKey("MemoryFormFactorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Memory.Type", "MemoryType")
                        .WithMany("Motherboards")
                        .HasForeignKey("MemoryTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Chipset");

                    b.Navigation("Component");

                    b.Navigation("FormFactor");

                    b.Navigation("MemoryFormFactor");

                    b.Navigation("MemoryType");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitIOConnector", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.IO.Connector", "Connector")
                        .WithMany("Motherboards")
                        .HasForeignKey("ConnectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Motherboard.Unit", "Unit")
                        .WithMany("IOConnectors")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connector");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitM2Slot", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.M2.Slot", "Slot")
                        .WithMany("Motherboards")
                        .HasForeignKey("SlotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Motherboard.Unit", "Unit")
                        .WithMany("M2Slots")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitPcieSlot", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Pcie.Slot", "Slot")
                        .WithMany("Motherboards")
                        .HasForeignKey("SlotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Motherboard.Unit", "Unit")
                        .WithMany("PcieSlots")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitPowerSupplyConnector", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.PowerSupply.Connector", "Connector")
                        .WithMany("Motherboards")
                        .HasForeignKey("ConnectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Motherboard.Unit", "Unit")
                        .WithMany("PowerSupplyConnectors")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connector");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Pcie.ExpansionCard", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Pcie.Bracket", "Bracket")
                        .WithMany("ExpansionCards")
                        .HasForeignKey("BracketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Pcie.Size", "LaneSize")
                        .WithMany("LaneMatchingPcieExpansionCards")
                        .HasForeignKey("LaneSizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Pcie.Size", "PhysicalSize")
                        .WithMany("PhysicalMatchingPcieExpansionCards")
                        .HasForeignKey("PhysicalSizeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Pcie.Version", "Version")
                        .WithMany("PcieExpansionCards")
                        .HasForeignKey("VersionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bracket");

                    b.Navigation("LaneSize");

                    b.Navigation("PhysicalSize");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Pcie.Slot", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Pcie.Size", "LaneSize")
                        .WithMany("LaneMatchingPcieSlots")
                        .HasForeignKey("LaneSizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Pcie.Size", "PhysicalSize")
                        .WithMany("PhysicalMatchingPcieSlots")
                        .HasForeignKey("PhysicalSizeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Pcie.Version", "Version")
                        .WithMany("PcieSlots")
                        .HasForeignKey("VersionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaneSize");

                    b.Navigation("PhysicalSize");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.PowerSupply.Unit", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.General.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.PowerSupply.EfficiencyRating", "EfficiencyRating")
                        .WithMany("Units")
                        .HasForeignKey("EfficiencyRatingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.PowerSupply.FormFactor", "FormFactor")
                        .WithMany("Units")
                        .HasForeignKey("FormFactorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.PowerSupply.Modularity", "Modularity")
                        .WithMany("Units")
                        .HasForeignKey("ModularityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("EfficiencyRating");

                    b.Navigation("FormFactor");

                    b.Navigation("Modularity");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.PowerSupply.UnitConnector", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.PowerSupply.Connector", "Connector")
                        .WithMany("Units")
                        .HasForeignKey("ConnectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.PowerSupply.Unit", "Unit")
                        .WithMany("Connectors")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connector");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.Drive", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Storage.Unit", "Unit")
                        .WithOne("Drive")
                        .HasForeignKey("ConfiguratorBackend.Models.Catalogue.Storage.Drive", "UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.Unit", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.General.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Storage.ConnectionInterface", "ConnectionInterface")
                        .WithMany("Units")
                        .HasForeignKey("ConnectionInterfaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("ConnectionInterface");
                });

            modelBuilder.Entity("ConnectorConnector", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.IO.Connector", null)
                        .WithMany()
                        .HasForeignKey("CompatibleConnectorsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.IO.Connector", null)
                        .WithMany()
                        .HasForeignKey("PhysicalConnectorsID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConnectorConnector1", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.PowerSupply.Connector", null)
                        .WithMany()
                        .HasForeignKey("CompatibleConnectorsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.PowerSupply.Connector", null)
                        .WithMany()
                        .HasForeignKey("PhysicalConnectorsID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormFactorSlot", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.M2.FormFactor", null)
                        .WithMany()
                        .HasForeignKey("FormFactorsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.M2.Slot", null)
                        .WithMany()
                        .HasForeignKey("SlotsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormFactorUnit", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Case.Unit", null)
                        .WithMany()
                        .HasForeignKey("CasesComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Motherboard.FormFactor", null)
                        .WithMany()
                        .HasForeignKey("MotherboardFormFactorsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KeyKey", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.M2.Key", null)
                        .WithMany()
                        .HasForeignKey("CompatibleKeysID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.M2.Key", null)
                        .WithMany()
                        .HasForeignKey("PhysicalKeysID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocketUnit", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Cooler.Unit", null)
                        .WithMany()
                        .HasForeignKey("CoolersComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Socket", null)
                        .WithMany()
                        .HasForeignKey("SocketsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Cooler.LiquidUnit", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Cooler.RadiatorSize", "RadiatorSize")
                        .WithMany("Units")
                        .HasForeignKey("RadiatorSizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RadiatorSize");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.SolidStateDrive", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Storage.NandType", "NandType")
                        .WithMany("Drives")
                        .HasForeignKey("NandTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NandType");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.CaseUnit", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.Storage.FormFactor", "FormFactor")
                        .WithMany("Units")
                        .HasForeignKey("FormFactorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.IO.Connector", "IOConnector")
                        .WithMany("StorageUnits")
                        .HasForeignKey("IOConnectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConfiguratorBackend.Models.Catalogue.PowerSupply.Connector", "PowerSupplyConnector")
                        .WithMany("StorageUnits")
                        .HasForeignKey("PowerSupplyConnectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormFactor");

                    b.Navigation("IOConnector");

                    b.Navigation("PowerSupplyConnector");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.M2Unit", b =>
                {
                    b.HasOne("ConfiguratorBackend.Models.Catalogue.M2.ExpansionCard", "ExpansionCard")
                        .WithMany()
                        .HasForeignKey("ExpansionCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpansionCard");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.Layout", b =>
                {
                    b.Navigation("Panels");

                    b.Navigation("StorageAreas");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.LayoutPanel", b =>
                {
                    b.Navigation("Fans");

                    b.Navigation("Radiators");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.Material", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.Panel", b =>
                {
                    b.Navigation("Layouts");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.Size", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.StorageArea", b =>
                {
                    b.Navigation("DriveBays");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Case.Unit", b =>
                {
                    b.Navigation("ExpansionSlotAreas");

                    b.Navigation("IOConnectors");

                    b.Navigation("Layouts");

                    b.Navigation("PowerSupplyConnectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Channel", b =>
                {
                    b.Navigation("Motherboards");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.CentralProcessor.CoreFamily", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Microarchitecture", b =>
                {
                    b.Navigation("CoreFamilies");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Series", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.CentralProcessor.Socket", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Cooler.RadiatorSize", b =>
                {
                    b.Navigation("CasePanels");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Cooler.Unit", b =>
                {
                    b.Navigation("Connectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Fan.Pack", b =>
                {
                    b.Navigation("Connectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Fan.Size", b =>
                {
                    b.Navigation("CasePanels");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.General.Colour", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.General.Manufacturer", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.GraphicsCard.Chipset", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.GraphicsCard.Configuration", b =>
                {
                    b.Navigation("Connectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.GraphicsCard.Unit", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.IO.Connector", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("Coolers");

                    b.Navigation("Fans");

                    b.Navigation("Motherboards");

                    b.Navigation("StorageUnits");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.M2.FormFactor", b =>
                {
                    b.Navigation("ExpansionCards");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.M2.Key", b =>
                {
                    b.Navigation("ExpansionCards");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.M2.Slot", b =>
                {
                    b.Navigation("Motherboards");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Memory.FormFactor", b =>
                {
                    b.Navigation("Kits");

                    b.Navigation("Motherboards");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Memory.Type", b =>
                {
                    b.Navigation("GraphicsCards");

                    b.Navigation("Kits");

                    b.Navigation("Motherboards");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.Chipset", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.FormFactor", b =>
                {
                    b.Navigation("CasesWithAsPrimary");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.Unit", b =>
                {
                    b.Navigation("IOConnectors");

                    b.Navigation("M2Slots");

                    b.Navigation("PcieSlots");

                    b.Navigation("PowerSupplyConnectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitM2Slot", b =>
                {
                    b.Navigation("CoreFamilies");

                    b.Navigation("Processors");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Motherboard.UnitPcieSlot", b =>
                {
                    b.Navigation("CoreFamilies");

                    b.Navigation("Processors");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Pcie.Bracket", b =>
                {
                    b.Navigation("ExpansionCards");

                    b.Navigation("ExpansionSlotAreas");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Pcie.ExpansionCard", b =>
                {
                    b.Navigation("GraphicsProcessor");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Pcie.Size", b =>
                {
                    b.Navigation("LaneMatchingPcieExpansionCards");

                    b.Navigation("LaneMatchingPcieSlots");

                    b.Navigation("M2Slots");

                    b.Navigation("PhysicalMatchingPcieExpansionCards");

                    b.Navigation("PhysicalMatchingPcieSlots");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Pcie.Slot", b =>
                {
                    b.Navigation("Motherboards");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Pcie.Version", b =>
                {
                    b.Navigation("M2ExpansionCards");

                    b.Navigation("M2Slots");

                    b.Navigation("PcieExpansionCards");

                    b.Navigation("PcieSlots");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.PowerSupply.Connector", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("GraphicsCards");

                    b.Navigation("Motherboards");

                    b.Navigation("StorageUnits");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.PowerSupply.EfficiencyRating", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.PowerSupply.FormFactor", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.PowerSupply.Modularity", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.PowerSupply.Unit", b =>
                {
                    b.Navigation("Connectors");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.ConnectionInterface", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.FormFactor", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.NandType", b =>
                {
                    b.Navigation("Drives");
                });

            modelBuilder.Entity("ConfiguratorBackend.Models.Catalogue.Storage.Unit", b =>
                {
                    b.Navigation("Drive")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
